{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Bike Map\"\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "Bienvenue, voici la carte :\n"
      ],
      "id": "e42edf44"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import geopandas as gpd\n",
        "import folium\n",
        "import json\n",
        "from shapely.geometry import Point\n",
        "from IPython.display import IFrame\n",
        "\n",
        "# Données\n",
        "traffic_data_path = 'collecte/map/eco_comptage.json'\n",
        "with open(traffic_data_path, 'r') as file:\n",
        "    traffic_data = json.load(file)\n",
        "\n",
        "# Coordonnées null enlevées\n",
        "valid_traffic_data = [\n",
        "    item for item in traffic_data \n",
        "    if 'coordinates' in item['location'] and item['location']['coordinates'][0] is not None and item['location']['coordinates'][1] is not None\n",
        "]\n",
        "\n",
        "# GeoDataFrame\n",
        "traffic_gdf = gpd.GeoDataFrame(\n",
        "    valid_traffic_data,\n",
        "    geometry=[Point(data['location']['coordinates']) for data in valid_traffic_data],\n",
        "    crs=\"EPSG:4326\"\n",
        ")\n",
        "\n",
        "# Routes\n",
        "routes_gdf = gpd.read_file('collecte/map/export.geojson')\n",
        "routes_gdf = routes_gdf.to_crs(traffic_gdf.crs)\n",
        "\n",
        "# Jointure\n",
        "joined_gdf = gpd.sjoin_nearest(routes_gdf, traffic_gdf, how=\"inner\", max_distance=100)\n",
        "\n",
        "# Fonction pour choisir la couleur\n",
        "def get_color(intensity):\n",
        "    if intensity > 1000:\n",
        "        return 'red'\n",
        "    elif intensity > 500:\n",
        "        return 'orange'\n",
        "    else:\n",
        "        return 'green'\n",
        "\n",
        "# Création de la carte\n",
        "map = folium.Map(location=[43.610769, 3.876716], zoom_start=13)\n",
        "\n",
        "# Ajout des lignes sur la carte\n",
        "for _, row in joined_gdf.iterrows():\n",
        "    route_color = get_color(row['intensity'])\n",
        "    folium.PolyLine(\n",
        "        locations=[[p[1], p[0]] for p in list(row['geometry'].coords)],\n",
        "        color=route_color,\n",
        "        weight=5\n",
        "    ).add_to(map)\n",
        "\n",
        "# Sauvegarde temporaire et affichage dans Quarto\n",
        "IFrame(src=map_path, width=\"100%\", height=\"600\")\n"
      ],
      "id": "cd67658b",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "D:\\my_conda_envs\\hax712_env\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}